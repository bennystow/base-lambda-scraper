# .github/workflows/deploy-to-ecr.yml
name: Build, Test, and Push Docker Image to ECR

on:
  push:
    branches:
      - main
      - development

env:
  AWS_REGION: eu-west-2

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x" # Specify your Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Ensure you have a requirements.txt file in your repository root
          # that includes 'selenium' and any other dependencies for src/ and tests/.
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # If you have test-specific dependencies, consider a requirements-dev.txt
          # if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Run tests
        # This command will discover and run tests in the 'tests' directory.
        # The test_scraper.py includes a Docker build in its setUpClass,
        # which is fine as Docker is available on ubuntu-latest runners.
        run: python -m unittest discover tests

  build_and_push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: test # Ensures tests pass before building and pushing
    # These permissions are needed to interact with GitHub's OIDC Token endpoint.
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::131172206933:role/GitHubActionsRole # Replace with your IAM role ARN
          # Ensure this AWS_REGION is consistent or also made dynamic if needed
          # For now, using a fixed one as per original.
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          # Dynamically set ECR_REPOSITORY_NAME based on the branch
          ECR_REPOSITORY_NAME: ${{ github.ref == 'refs/heads/main' && 'production/base-image' || 'development/base-image' }}
          IMAGE_ARTIFACT_NAME: "base-web-scraper" # The desired name for your image artifact
          AWS_REGION: "eu-west-2" # Define AWS_REGION here if not globally set for the job
          IMAGE_TAG: ${{ github.sha }} # Use the commit SHA as the image tag
        # The working-directory should point to where your Dockerfile is located
        # relative to the root of your repository after checkout.
        working-directory: ./ # Assumes Dockerfile is at the repository root
        run: |
          echo "ECR Registry: $ECR_REGISTRY"
          echo "ECR Repository Name (path): $ECR_REPOSITORY_NAME"
          echo "Image Artifact Name: $IMAGE_ARTIFACT_NAME"
          echo "Image Tag (SHA): $IMAGE_TAG"
          ls -la # Useful for debugging paths
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME/$IMAGE_ARTIFACT_NAME:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY_NAME/$IMAGE_ARTIFACT_NAME:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME/$IMAGE_ARTIFACT_NAME:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_NAME/$IMAGE_ARTIFACT_NAME:latest
          echo "Pushed image: $ECR_REGISTRY/$ECR_REPOSITORY_NAME/$IMAGE_ARTIFACT_NAME (tags: $IMAGE_TAG, latest)"
